// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"locathlete-server/ent/athlete"
	"locathlete-server/ent/athleteschool"
	"locathlete-server/ent/predicate"
	"locathlete-server/ent/school"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// AthleteSchoolQuery is the builder for querying AthleteSchool entities.
type AthleteSchoolQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AthleteSchool
	// eager-loading edges.
	withAthlete *AthleteQuery
	withSchool  *SchoolQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AthleteSchoolQuery builder.
func (asq *AthleteSchoolQuery) Where(ps ...predicate.AthleteSchool) *AthleteSchoolQuery {
	asq.predicates = append(asq.predicates, ps...)
	return asq
}

// Limit adds a limit step to the query.
func (asq *AthleteSchoolQuery) Limit(limit int) *AthleteSchoolQuery {
	asq.limit = &limit
	return asq
}

// Offset adds an offset step to the query.
func (asq *AthleteSchoolQuery) Offset(offset int) *AthleteSchoolQuery {
	asq.offset = &offset
	return asq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (asq *AthleteSchoolQuery) Unique(unique bool) *AthleteSchoolQuery {
	asq.unique = &unique
	return asq
}

// Order adds an order step to the query.
func (asq *AthleteSchoolQuery) Order(o ...OrderFunc) *AthleteSchoolQuery {
	asq.order = append(asq.order, o...)
	return asq
}

// QueryAthlete chains the current query on the "athlete" edge.
func (asq *AthleteSchoolQuery) QueryAthlete() *AthleteQuery {
	query := &AthleteQuery{config: asq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := asq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := asq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(athleteschool.Table, athleteschool.AthleteColumn, selector),
			sqlgraph.To(athlete.Table, athlete.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, athleteschool.AthleteTable, athleteschool.AthleteColumn),
		)
		fromU = sqlgraph.SetNeighbors(asq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySchool chains the current query on the "school" edge.
func (asq *AthleteSchoolQuery) QuerySchool() *SchoolQuery {
	query := &SchoolQuery{config: asq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := asq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := asq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(athleteschool.Table, athleteschool.SchoolColumn, selector),
			sqlgraph.To(school.Table, school.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, athleteschool.SchoolTable, athleteschool.SchoolColumn),
		)
		fromU = sqlgraph.SetNeighbors(asq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AthleteSchool entity from the query.
// Returns a *NotFoundError when no AthleteSchool was found.
func (asq *AthleteSchoolQuery) First(ctx context.Context) (*AthleteSchool, error) {
	nodes, err := asq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{athleteschool.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (asq *AthleteSchoolQuery) FirstX(ctx context.Context) *AthleteSchool {
	node, err := asq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single AthleteSchool entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AthleteSchool entity is found.
// Returns a *NotFoundError when no AthleteSchool entities are found.
func (asq *AthleteSchoolQuery) Only(ctx context.Context) (*AthleteSchool, error) {
	nodes, err := asq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{athleteschool.Label}
	default:
		return nil, &NotSingularError{athleteschool.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (asq *AthleteSchoolQuery) OnlyX(ctx context.Context) *AthleteSchool {
	node, err := asq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of AthleteSchools.
func (asq *AthleteSchoolQuery) All(ctx context.Context) ([]*AthleteSchool, error) {
	if err := asq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return asq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (asq *AthleteSchoolQuery) AllX(ctx context.Context) []*AthleteSchool {
	nodes, err := asq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (asq *AthleteSchoolQuery) Count(ctx context.Context) (int, error) {
	if err := asq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return asq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (asq *AthleteSchoolQuery) CountX(ctx context.Context) int {
	count, err := asq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (asq *AthleteSchoolQuery) Exist(ctx context.Context) (bool, error) {
	if err := asq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return asq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (asq *AthleteSchoolQuery) ExistX(ctx context.Context) bool {
	exist, err := asq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AthleteSchoolQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (asq *AthleteSchoolQuery) Clone() *AthleteSchoolQuery {
	if asq == nil {
		return nil
	}
	return &AthleteSchoolQuery{
		config:      asq.config,
		limit:       asq.limit,
		offset:      asq.offset,
		order:       append([]OrderFunc{}, asq.order...),
		predicates:  append([]predicate.AthleteSchool{}, asq.predicates...),
		withAthlete: asq.withAthlete.Clone(),
		withSchool:  asq.withSchool.Clone(),
		// clone intermediate query.
		sql:    asq.sql.Clone(),
		path:   asq.path,
		unique: asq.unique,
	}
}

// WithAthlete tells the query-builder to eager-load the nodes that are connected to
// the "athlete" edge. The optional arguments are used to configure the query builder of the edge.
func (asq *AthleteSchoolQuery) WithAthlete(opts ...func(*AthleteQuery)) *AthleteSchoolQuery {
	query := &AthleteQuery{config: asq.config}
	for _, opt := range opts {
		opt(query)
	}
	asq.withAthlete = query
	return asq
}

// WithSchool tells the query-builder to eager-load the nodes that are connected to
// the "school" edge. The optional arguments are used to configure the query builder of the edge.
func (asq *AthleteSchoolQuery) WithSchool(opts ...func(*SchoolQuery)) *AthleteSchoolQuery {
	query := &SchoolQuery{config: asq.config}
	for _, opt := range opts {
		opt(query)
	}
	asq.withSchool = query
	return asq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AthleteID int `json:"athlete_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AthleteSchool.Query().
//		GroupBy(athleteschool.FieldAthleteID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (asq *AthleteSchoolQuery) GroupBy(field string, fields ...string) *AthleteSchoolGroupBy {
	grbuild := &AthleteSchoolGroupBy{config: asq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := asq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return asq.sqlQuery(ctx), nil
	}
	grbuild.label = athleteschool.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AthleteID int `json:"athlete_id,omitempty"`
//	}
//
//	client.AthleteSchool.Query().
//		Select(athleteschool.FieldAthleteID).
//		Scan(ctx, &v)
func (asq *AthleteSchoolQuery) Select(fields ...string) *AthleteSchoolSelect {
	asq.fields = append(asq.fields, fields...)
	selbuild := &AthleteSchoolSelect{AthleteSchoolQuery: asq}
	selbuild.label = athleteschool.Label
	selbuild.flds, selbuild.scan = &asq.fields, selbuild.Scan
	return selbuild
}

func (asq *AthleteSchoolQuery) prepareQuery(ctx context.Context) error {
	for _, f := range asq.fields {
		if !athleteschool.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if asq.path != nil {
		prev, err := asq.path(ctx)
		if err != nil {
			return err
		}
		asq.sql = prev
	}
	return nil
}

func (asq *AthleteSchoolQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AthleteSchool, error) {
	var (
		nodes       = []*AthleteSchool{}
		_spec       = asq.querySpec()
		loadedTypes = [2]bool{
			asq.withAthlete != nil,
			asq.withSchool != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*AthleteSchool).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &AthleteSchool{config: asq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, asq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := asq.withAthlete; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*AthleteSchool)
		for i := range nodes {
			fk := nodes[i].AthleteID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(athlete.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "athlete_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Athlete = n
			}
		}
	}

	if query := asq.withSchool; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*AthleteSchool)
		for i := range nodes {
			fk := nodes[i].SchoolID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(school.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "school_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.School = n
			}
		}
	}

	return nodes, nil
}

func (asq *AthleteSchoolQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := asq.querySpec()
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, asq.driver, _spec)
}

func (asq *AthleteSchoolQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := asq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (asq *AthleteSchoolQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   athleteschool.Table,
			Columns: athleteschool.Columns,
		},
		From:   asq.sql,
		Unique: true,
	}
	if unique := asq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := asq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
	}
	if ps := asq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := asq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := asq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := asq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (asq *AthleteSchoolQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(asq.driver.Dialect())
	t1 := builder.Table(athleteschool.Table)
	columns := asq.fields
	if len(columns) == 0 {
		columns = athleteschool.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if asq.sql != nil {
		selector = asq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if asq.unique != nil && *asq.unique {
		selector.Distinct()
	}
	for _, p := range asq.predicates {
		p(selector)
	}
	for _, p := range asq.order {
		p(selector)
	}
	if offset := asq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := asq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AthleteSchoolGroupBy is the group-by builder for AthleteSchool entities.
type AthleteSchoolGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (asgb *AthleteSchoolGroupBy) Aggregate(fns ...AggregateFunc) *AthleteSchoolGroupBy {
	asgb.fns = append(asgb.fns, fns...)
	return asgb
}

// Scan applies the group-by query and scans the result into the given value.
func (asgb *AthleteSchoolGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := asgb.path(ctx)
	if err != nil {
		return err
	}
	asgb.sql = query
	return asgb.sqlScan(ctx, v)
}

func (asgb *AthleteSchoolGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range asgb.fields {
		if !athleteschool.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := asgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := asgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (asgb *AthleteSchoolGroupBy) sqlQuery() *sql.Selector {
	selector := asgb.sql.Select()
	aggregation := make([]string, 0, len(asgb.fns))
	for _, fn := range asgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(asgb.fields)+len(asgb.fns))
		for _, f := range asgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(asgb.fields...)...)
}

// AthleteSchoolSelect is the builder for selecting fields of AthleteSchool entities.
type AthleteSchoolSelect struct {
	*AthleteSchoolQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ass *AthleteSchoolSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ass.prepareQuery(ctx); err != nil {
		return err
	}
	ass.sql = ass.AthleteSchoolQuery.sqlQuery(ctx)
	return ass.sqlScan(ctx, v)
}

func (ass *AthleteSchoolSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ass.sql.Query()
	if err := ass.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
