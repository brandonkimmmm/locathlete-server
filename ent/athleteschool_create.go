// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"locathlete-server/ent/athlete"
	"locathlete-server/ent/athleteschool"
	"locathlete-server/ent/school"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AthleteSchoolCreate is the builder for creating a AthleteSchool entity.
type AthleteSchoolCreate struct {
	config
	mutation *AthleteSchoolMutation
	hooks    []Hook
}

// SetAthleteID sets the "athlete_id" field.
func (asc *AthleteSchoolCreate) SetAthleteID(i int) *AthleteSchoolCreate {
	asc.mutation.SetAthleteID(i)
	return asc
}

// SetSchoolID sets the "school_id" field.
func (asc *AthleteSchoolCreate) SetSchoolID(i int) *AthleteSchoolCreate {
	asc.mutation.SetSchoolID(i)
	return asc
}

// SetStartDate sets the "start_date" field.
func (asc *AthleteSchoolCreate) SetStartDate(t time.Time) *AthleteSchoolCreate {
	asc.mutation.SetStartDate(t)
	return asc
}

// SetEndDate sets the "end_date" field.
func (asc *AthleteSchoolCreate) SetEndDate(t time.Time) *AthleteSchoolCreate {
	asc.mutation.SetEndDate(t)
	return asc
}

// SetCreatedAt sets the "created_at" field.
func (asc *AthleteSchoolCreate) SetCreatedAt(t time.Time) *AthleteSchoolCreate {
	asc.mutation.SetCreatedAt(t)
	return asc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asc *AthleteSchoolCreate) SetNillableCreatedAt(t *time.Time) *AthleteSchoolCreate {
	if t != nil {
		asc.SetCreatedAt(*t)
	}
	return asc
}

// SetAthlete sets the "athlete" edge to the Athlete entity.
func (asc *AthleteSchoolCreate) SetAthlete(a *Athlete) *AthleteSchoolCreate {
	return asc.SetAthleteID(a.ID)
}

// SetSchool sets the "school" edge to the School entity.
func (asc *AthleteSchoolCreate) SetSchool(s *School) *AthleteSchoolCreate {
	return asc.SetSchoolID(s.ID)
}

// Mutation returns the AthleteSchoolMutation object of the builder.
func (asc *AthleteSchoolCreate) Mutation() *AthleteSchoolMutation {
	return asc.mutation
}

// Save creates the AthleteSchool in the database.
func (asc *AthleteSchoolCreate) Save(ctx context.Context) (*AthleteSchool, error) {
	var (
		err  error
		node *AthleteSchool
	)
	asc.defaults()
	if len(asc.hooks) == 0 {
		if err = asc.check(); err != nil {
			return nil, err
		}
		node, err = asc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AthleteSchoolMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = asc.check(); err != nil {
				return nil, err
			}
			asc.mutation = mutation
			if node, err = asc.sqlSave(ctx); err != nil {
				return nil, err
			}
			return node, err
		})
		for i := len(asc.hooks) - 1; i >= 0; i-- {
			if asc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, asc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AthleteSchool)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AthleteSchoolMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (asc *AthleteSchoolCreate) SaveX(ctx context.Context) *AthleteSchool {
	v, err := asc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asc *AthleteSchoolCreate) Exec(ctx context.Context) error {
	_, err := asc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asc *AthleteSchoolCreate) ExecX(ctx context.Context) {
	if err := asc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asc *AthleteSchoolCreate) defaults() {
	if _, ok := asc.mutation.CreatedAt(); !ok {
		v := athleteschool.DefaultCreatedAt()
		asc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asc *AthleteSchoolCreate) check() error {
	if _, ok := asc.mutation.AthleteID(); !ok {
		return &ValidationError{Name: "athlete_id", err: errors.New(`ent: missing required field "AthleteSchool.athlete_id"`)}
	}
	if _, ok := asc.mutation.SchoolID(); !ok {
		return &ValidationError{Name: "school_id", err: errors.New(`ent: missing required field "AthleteSchool.school_id"`)}
	}
	if _, ok := asc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "AthleteSchool.start_date"`)}
	}
	if _, ok := asc.mutation.EndDate(); !ok {
		return &ValidationError{Name: "end_date", err: errors.New(`ent: missing required field "AthleteSchool.end_date"`)}
	}
	if _, ok := asc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AthleteSchool.created_at"`)}
	}
	if _, ok := asc.mutation.AthleteID(); !ok {
		return &ValidationError{Name: "athlete", err: errors.New(`ent: missing required edge "AthleteSchool.athlete"`)}
	}
	if _, ok := asc.mutation.SchoolID(); !ok {
		return &ValidationError{Name: "school", err: errors.New(`ent: missing required edge "AthleteSchool.school"`)}
	}
	return nil
}

func (asc *AthleteSchoolCreate) sqlSave(ctx context.Context) (*AthleteSchool, error) {
	_node, _spec := asc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (asc *AthleteSchoolCreate) createSpec() (*AthleteSchool, *sqlgraph.CreateSpec) {
	var (
		_node = &AthleteSchool{config: asc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: athleteschool.Table,
		}
	)
	if value, ok := asc.mutation.StartDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: athleteschool.FieldStartDate,
		})
		_node.StartDate = value
	}
	if value, ok := asc.mutation.EndDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: athleteschool.FieldEndDate,
		})
		_node.EndDate = value
	}
	if value, ok := asc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: athleteschool.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := asc.mutation.AthleteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   athleteschool.AthleteTable,
			Columns: []string{athleteschool.AthleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: athlete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AthleteID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := asc.mutation.SchoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   athleteschool.SchoolTable,
			Columns: []string{athleteschool.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: school.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SchoolID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AthleteSchoolCreateBulk is the builder for creating many AthleteSchool entities in bulk.
type AthleteSchoolCreateBulk struct {
	config
	builders []*AthleteSchoolCreate
}

// Save creates the AthleteSchool entities in the database.
func (ascb *AthleteSchoolCreateBulk) Save(ctx context.Context) ([]*AthleteSchool, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ascb.builders))
	nodes := make([]*AthleteSchool, len(ascb.builders))
	mutators := make([]Mutator, len(ascb.builders))
	for i := range ascb.builders {
		func(i int, root context.Context) {
			builder := ascb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AthleteSchoolMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ascb *AthleteSchoolCreateBulk) SaveX(ctx context.Context) []*AthleteSchool {
	v, err := ascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ascb *AthleteSchoolCreateBulk) Exec(ctx context.Context) error {
	_, err := ascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ascb *AthleteSchoolCreateBulk) ExecX(ctx context.Context) {
	if err := ascb.Exec(ctx); err != nil {
		panic(err)
	}
}
