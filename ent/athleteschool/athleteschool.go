// Code generated by ent, DO NOT EDIT.

package athleteschool

import (
	"time"
)

const (
	// Label holds the string label denoting the athleteschool type in the database.
	Label = "athlete_school"
	// FieldAthleteID holds the string denoting the athlete_id field in the database.
	FieldAthleteID = "athlete_id"
	// FieldSchoolID holds the string denoting the school_id field in the database.
	FieldSchoolID = "school_id"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeAthlete holds the string denoting the athlete edge name in mutations.
	EdgeAthlete = "athlete"
	// EdgeSchool holds the string denoting the school edge name in mutations.
	EdgeSchool = "school"
	// AthleteFieldID holds the string denoting the ID field of the Athlete.
	AthleteFieldID = "id"
	// SchoolFieldID holds the string denoting the ID field of the School.
	SchoolFieldID = "id"
	// Table holds the table name of the athleteschool in the database.
	Table = "athlete_schools"
	// AthleteTable is the table that holds the athlete relation/edge.
	AthleteTable = "athlete_schools"
	// AthleteInverseTable is the table name for the Athlete entity.
	// It exists in this package in order to avoid circular dependency with the "athlete" package.
	AthleteInverseTable = "athletes"
	// AthleteColumn is the table column denoting the athlete relation/edge.
	AthleteColumn = "athlete_id"
	// SchoolTable is the table that holds the school relation/edge.
	SchoolTable = "athlete_schools"
	// SchoolInverseTable is the table name for the School entity.
	// It exists in this package in order to avoid circular dependency with the "school" package.
	SchoolInverseTable = "schools"
	// SchoolColumn is the table column denoting the school relation/edge.
	SchoolColumn = "school_id"
)

// Columns holds all SQL columns for athleteschool fields.
var Columns = []string{
	FieldAthleteID,
	FieldSchoolID,
	FieldStartDate,
	FieldEndDate,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)
