// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"locathlete-server/ent/athlete"
	"locathlete-server/ent/athleteschool"
	"locathlete-server/ent/school"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// AthleteSchool is the model entity for the AthleteSchool schema.
type AthleteSchool struct {
	config `json:"-"`
	// AthleteID holds the value of the "athlete_id" field.
	AthleteID int `json:"athlete_id,omitempty"`
	// SchoolID holds the value of the "school_id" field.
	SchoolID int `json:"school_id,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AthleteSchoolQuery when eager-loading is set.
	Edges AthleteSchoolEdges `json:"edges"`
}

// AthleteSchoolEdges holds the relations/edges for other nodes in the graph.
type AthleteSchoolEdges struct {
	// Athlete holds the value of the athlete edge.
	Athlete *Athlete `json:"athlete,omitempty"`
	// School holds the value of the school edge.
	School *School `json:"school,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AthleteOrErr returns the Athlete value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AthleteSchoolEdges) AthleteOrErr() (*Athlete, error) {
	if e.loadedTypes[0] {
		if e.Athlete == nil {
			// The edge athlete was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: athlete.Label}
		}
		return e.Athlete, nil
	}
	return nil, &NotLoadedError{edge: "athlete"}
}

// SchoolOrErr returns the School value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AthleteSchoolEdges) SchoolOrErr() (*School, error) {
	if e.loadedTypes[1] {
		if e.School == nil {
			// The edge school was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: school.Label}
		}
		return e.School, nil
	}
	return nil, &NotLoadedError{edge: "school"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AthleteSchool) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case athleteschool.FieldAthleteID, athleteschool.FieldSchoolID:
			values[i] = new(sql.NullInt64)
		case athleteschool.FieldStartDate, athleteschool.FieldEndDate, athleteschool.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AthleteSchool", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AthleteSchool fields.
func (as *AthleteSchool) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case athleteschool.FieldAthleteID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field athlete_id", values[i])
			} else if value.Valid {
				as.AthleteID = int(value.Int64)
			}
		case athleteschool.FieldSchoolID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field school_id", values[i])
			} else if value.Valid {
				as.SchoolID = int(value.Int64)
			}
		case athleteschool.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				as.StartDate = value.Time
			}
		case athleteschool.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				as.EndDate = value.Time
			}
		case athleteschool.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				as.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryAthlete queries the "athlete" edge of the AthleteSchool entity.
func (as *AthleteSchool) QueryAthlete() *AthleteQuery {
	return (&AthleteSchoolClient{config: as.config}).QueryAthlete(as)
}

// QuerySchool queries the "school" edge of the AthleteSchool entity.
func (as *AthleteSchool) QuerySchool() *SchoolQuery {
	return (&AthleteSchoolClient{config: as.config}).QuerySchool(as)
}

// Update returns a builder for updating this AthleteSchool.
// Note that you need to call AthleteSchool.Unwrap() before calling this method if this AthleteSchool
// was returned from a transaction, and the transaction was committed or rolled back.
func (as *AthleteSchool) Update() *AthleteSchoolUpdateOne {
	return (&AthleteSchoolClient{config: as.config}).UpdateOne(as)
}

// Unwrap unwraps the AthleteSchool entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (as *AthleteSchool) Unwrap() *AthleteSchool {
	_tx, ok := as.config.driver.(*txDriver)
	if !ok {
		panic("ent: AthleteSchool is not a transactional entity")
	}
	as.config.driver = _tx.drv
	return as
}

// String implements the fmt.Stringer.
func (as *AthleteSchool) String() string {
	var builder strings.Builder
	builder.WriteString("AthleteSchool(")
	builder.WriteString("athlete_id=")
	builder.WriteString(fmt.Sprintf("%v", as.AthleteID))
	builder.WriteString(", ")
	builder.WriteString("school_id=")
	builder.WriteString(fmt.Sprintf("%v", as.SchoolID))
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(as.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(as.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(as.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AthleteSchools is a parsable slice of AthleteSchool.
type AthleteSchools []*AthleteSchool

func (as AthleteSchools) config(cfg config) {
	for _i := range as {
		as[_i].config = cfg
	}
}
