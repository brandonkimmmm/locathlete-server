// Code generated by ent, DO NOT EDIT.

package athlete

import (
	"time"
)

const (
	// Label holds the string label denoting the athlete type in the database.
	Label = "athlete"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBio holds the string denoting the bio field in the database.
	FieldBio = "bio"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldMiddleName holds the string denoting the middle_name field in the database.
	FieldMiddleName = "middle_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeSchools holds the string denoting the schools edge name in mutations.
	EdgeSchools = "schools"
	// EdgeAthleteSchools holds the string denoting the athlete_schools edge name in mutations.
	EdgeAthleteSchools = "athlete_schools"
	// Table holds the table name of the athlete in the database.
	Table = "athletes"
	// SchoolsTable is the table that holds the schools relation/edge. The primary key declared below.
	SchoolsTable = "athlete_schools"
	// SchoolsInverseTable is the table name for the School entity.
	// It exists in this package in order to avoid circular dependency with the "school" package.
	SchoolsInverseTable = "schools"
	// AthleteSchoolsTable is the table that holds the athlete_schools relation/edge.
	AthleteSchoolsTable = "athlete_schools"
	// AthleteSchoolsInverseTable is the table name for the AthleteSchool entity.
	// It exists in this package in order to avoid circular dependency with the "athleteschool" package.
	AthleteSchoolsInverseTable = "athlete_schools"
	// AthleteSchoolsColumn is the table column denoting the athlete_schools relation/edge.
	AthleteSchoolsColumn = "athlete_id"
)

// Columns holds all SQL columns for athlete fields.
var Columns = []string{
	FieldID,
	FieldBio,
	FieldFirstName,
	FieldMiddleName,
	FieldLastName,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// SchoolsPrimaryKey and SchoolsColumn2 are the table columns denoting the
	// primary key for the schools relation (M2M).
	SchoolsPrimaryKey = []string{"athlete_id", "school_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// BioValidator is a validator for the "bio" field. It is called by the builders before save.
	BioValidator func(string) error
	// FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	FirstNameValidator func(string) error
	// LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	LastNameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
