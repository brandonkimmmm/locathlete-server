// Code generated by ent, DO NOT EDIT.

package school

import (
	"time"
)

const (
	// Label holds the string label denoting the school type in the database.
	Label = "school"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStreetAddress holds the string denoting the street_address field in the database.
	FieldStreetAddress = "street_address"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldAdministrationArea holds the string denoting the administration_area field in the database.
	FieldAdministrationArea = "administration_area"
	// FieldPostalCode holds the string denoting the postal_code field in the database.
	FieldPostalCode = "postal_code"
	// FieldLat holds the string denoting the lat field in the database.
	FieldLat = "lat"
	// FieldLng holds the string denoting the lng field in the database.
	FieldLng = "lng"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeAthletes holds the string denoting the athletes edge name in mutations.
	EdgeAthletes = "athletes"
	// EdgeSchoolAthletes holds the string denoting the school_athletes edge name in mutations.
	EdgeSchoolAthletes = "school_athletes"
	// Table holds the table name of the school in the database.
	Table = "schools"
	// AthletesTable is the table that holds the athletes relation/edge. The primary key declared below.
	AthletesTable = "athlete_schools"
	// AthletesInverseTable is the table name for the Athlete entity.
	// It exists in this package in order to avoid circular dependency with the "athlete" package.
	AthletesInverseTable = "athletes"
	// SchoolAthletesTable is the table that holds the school_athletes relation/edge.
	SchoolAthletesTable = "athlete_schools"
	// SchoolAthletesInverseTable is the table name for the AthleteSchool entity.
	// It exists in this package in order to avoid circular dependency with the "athleteschool" package.
	SchoolAthletesInverseTable = "athlete_schools"
	// SchoolAthletesColumn is the table column denoting the school_athletes relation/edge.
	SchoolAthletesColumn = "school_id"
)

// Columns holds all SQL columns for school fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldStreetAddress,
	FieldCity,
	FieldCountry,
	FieldAdministrationArea,
	FieldPostalCode,
	FieldLat,
	FieldLng,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// AthletesPrimaryKey and AthletesColumn2 are the table columns denoting the
	// primary key for the athletes relation (M2M).
	AthletesPrimaryKey = []string{"athlete_id", "school_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// StreetAddressValidator is a validator for the "street_address" field. It is called by the builders before save.
	StreetAddressValidator func(string) error
	// CityValidator is a validator for the "city" field. It is called by the builders before save.
	CityValidator func(string) error
	// CountryValidator is a validator for the "country" field. It is called by the builders before save.
	CountryValidator func(string) error
	// AdministrationAreaValidator is a validator for the "administration_area" field. It is called by the builders before save.
	AdministrationAreaValidator func(string) error
	// PostalCodeValidator is a validator for the "postal_code" field. It is called by the builders before save.
	PostalCodeValidator func(string) error
	// LatValidator is a validator for the "lat" field. It is called by the builders before save.
	LatValidator func(float64) error
	// LngValidator is a validator for the "lng" field. It is called by the builders before save.
	LngValidator func(float64) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
