// Code generated by ent, DO NOT EDIT.

package school

import (
	"locathlete-server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// StreetAddress applies equality check predicate on the "street_address" field. It's identical to StreetAddressEQ.
func StreetAddress(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStreetAddress), v))
	})
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCity), v))
	})
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountry), v))
	})
}

// AdministrationArea applies equality check predicate on the "administration_area" field. It's identical to AdministrationAreaEQ.
func AdministrationArea(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdministrationArea), v))
	})
}

// PostalCode applies equality check predicate on the "postal_code" field. It's identical to PostalCodeEQ.
func PostalCode(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPostalCode), v))
	})
}

// Lat applies equality check predicate on the "lat" field. It's identical to LatEQ.
func Lat(v float64) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLat), v))
	})
}

// Lng applies equality check predicate on the "lng" field. It's identical to LngEQ.
func Lng(v float64) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLng), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.School {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.School(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.School {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.School(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.School {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.School(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.School {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.School(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// StreetAddressEQ applies the EQ predicate on the "street_address" field.
func StreetAddressEQ(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressNEQ applies the NEQ predicate on the "street_address" field.
func StreetAddressNEQ(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressIn applies the In predicate on the "street_address" field.
func StreetAddressIn(vs ...string) predicate.School {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.School(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStreetAddress), v...))
	})
}

// StreetAddressNotIn applies the NotIn predicate on the "street_address" field.
func StreetAddressNotIn(vs ...string) predicate.School {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.School(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStreetAddress), v...))
	})
}

// StreetAddressGT applies the GT predicate on the "street_address" field.
func StreetAddressGT(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressGTE applies the GTE predicate on the "street_address" field.
func StreetAddressGTE(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressLT applies the LT predicate on the "street_address" field.
func StreetAddressLT(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressLTE applies the LTE predicate on the "street_address" field.
func StreetAddressLTE(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressContains applies the Contains predicate on the "street_address" field.
func StreetAddressContains(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressHasPrefix applies the HasPrefix predicate on the "street_address" field.
func StreetAddressHasPrefix(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressHasSuffix applies the HasSuffix predicate on the "street_address" field.
func StreetAddressHasSuffix(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressEqualFold applies the EqualFold predicate on the "street_address" field.
func StreetAddressEqualFold(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressContainsFold applies the ContainsFold predicate on the "street_address" field.
func StreetAddressContainsFold(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStreetAddress), v))
	})
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCity), v))
	})
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCity), v))
	})
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.School {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.School(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCity), v...))
	})
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.School {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.School(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCity), v...))
	})
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCity), v))
	})
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCity), v))
	})
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCity), v))
	})
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCity), v))
	})
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCity), v))
	})
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCity), v))
	})
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCity), v))
	})
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCity), v))
	})
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCity), v))
	})
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountry), v))
	})
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCountry), v))
	})
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.School {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.School(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCountry), v...))
	})
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.School {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.School(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCountry), v...))
	})
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCountry), v))
	})
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCountry), v))
	})
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCountry), v))
	})
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCountry), v))
	})
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCountry), v))
	})
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCountry), v))
	})
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCountry), v))
	})
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCountry), v))
	})
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCountry), v))
	})
}

// AdministrationAreaEQ applies the EQ predicate on the "administration_area" field.
func AdministrationAreaEQ(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdministrationArea), v))
	})
}

// AdministrationAreaNEQ applies the NEQ predicate on the "administration_area" field.
func AdministrationAreaNEQ(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAdministrationArea), v))
	})
}

// AdministrationAreaIn applies the In predicate on the "administration_area" field.
func AdministrationAreaIn(vs ...string) predicate.School {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.School(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAdministrationArea), v...))
	})
}

// AdministrationAreaNotIn applies the NotIn predicate on the "administration_area" field.
func AdministrationAreaNotIn(vs ...string) predicate.School {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.School(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAdministrationArea), v...))
	})
}

// AdministrationAreaGT applies the GT predicate on the "administration_area" field.
func AdministrationAreaGT(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAdministrationArea), v))
	})
}

// AdministrationAreaGTE applies the GTE predicate on the "administration_area" field.
func AdministrationAreaGTE(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAdministrationArea), v))
	})
}

// AdministrationAreaLT applies the LT predicate on the "administration_area" field.
func AdministrationAreaLT(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAdministrationArea), v))
	})
}

// AdministrationAreaLTE applies the LTE predicate on the "administration_area" field.
func AdministrationAreaLTE(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAdministrationArea), v))
	})
}

// AdministrationAreaContains applies the Contains predicate on the "administration_area" field.
func AdministrationAreaContains(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAdministrationArea), v))
	})
}

// AdministrationAreaHasPrefix applies the HasPrefix predicate on the "administration_area" field.
func AdministrationAreaHasPrefix(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAdministrationArea), v))
	})
}

// AdministrationAreaHasSuffix applies the HasSuffix predicate on the "administration_area" field.
func AdministrationAreaHasSuffix(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAdministrationArea), v))
	})
}

// AdministrationAreaEqualFold applies the EqualFold predicate on the "administration_area" field.
func AdministrationAreaEqualFold(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAdministrationArea), v))
	})
}

// AdministrationAreaContainsFold applies the ContainsFold predicate on the "administration_area" field.
func AdministrationAreaContainsFold(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAdministrationArea), v))
	})
}

// PostalCodeEQ applies the EQ predicate on the "postal_code" field.
func PostalCodeEQ(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPostalCode), v))
	})
}

// PostalCodeNEQ applies the NEQ predicate on the "postal_code" field.
func PostalCodeNEQ(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPostalCode), v))
	})
}

// PostalCodeIn applies the In predicate on the "postal_code" field.
func PostalCodeIn(vs ...string) predicate.School {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.School(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPostalCode), v...))
	})
}

// PostalCodeNotIn applies the NotIn predicate on the "postal_code" field.
func PostalCodeNotIn(vs ...string) predicate.School {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.School(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPostalCode), v...))
	})
}

// PostalCodeGT applies the GT predicate on the "postal_code" field.
func PostalCodeGT(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPostalCode), v))
	})
}

// PostalCodeGTE applies the GTE predicate on the "postal_code" field.
func PostalCodeGTE(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPostalCode), v))
	})
}

// PostalCodeLT applies the LT predicate on the "postal_code" field.
func PostalCodeLT(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPostalCode), v))
	})
}

// PostalCodeLTE applies the LTE predicate on the "postal_code" field.
func PostalCodeLTE(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPostalCode), v))
	})
}

// PostalCodeContains applies the Contains predicate on the "postal_code" field.
func PostalCodeContains(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPostalCode), v))
	})
}

// PostalCodeHasPrefix applies the HasPrefix predicate on the "postal_code" field.
func PostalCodeHasPrefix(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPostalCode), v))
	})
}

// PostalCodeHasSuffix applies the HasSuffix predicate on the "postal_code" field.
func PostalCodeHasSuffix(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPostalCode), v))
	})
}

// PostalCodeEqualFold applies the EqualFold predicate on the "postal_code" field.
func PostalCodeEqualFold(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPostalCode), v))
	})
}

// PostalCodeContainsFold applies the ContainsFold predicate on the "postal_code" field.
func PostalCodeContainsFold(v string) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPostalCode), v))
	})
}

// LatEQ applies the EQ predicate on the "lat" field.
func LatEQ(v float64) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLat), v))
	})
}

// LatNEQ applies the NEQ predicate on the "lat" field.
func LatNEQ(v float64) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLat), v))
	})
}

// LatIn applies the In predicate on the "lat" field.
func LatIn(vs ...float64) predicate.School {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.School(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLat), v...))
	})
}

// LatNotIn applies the NotIn predicate on the "lat" field.
func LatNotIn(vs ...float64) predicate.School {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.School(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLat), v...))
	})
}

// LatGT applies the GT predicate on the "lat" field.
func LatGT(v float64) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLat), v))
	})
}

// LatGTE applies the GTE predicate on the "lat" field.
func LatGTE(v float64) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLat), v))
	})
}

// LatLT applies the LT predicate on the "lat" field.
func LatLT(v float64) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLat), v))
	})
}

// LatLTE applies the LTE predicate on the "lat" field.
func LatLTE(v float64) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLat), v))
	})
}

// LngEQ applies the EQ predicate on the "lng" field.
func LngEQ(v float64) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLng), v))
	})
}

// LngNEQ applies the NEQ predicate on the "lng" field.
func LngNEQ(v float64) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLng), v))
	})
}

// LngIn applies the In predicate on the "lng" field.
func LngIn(vs ...float64) predicate.School {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.School(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLng), v...))
	})
}

// LngNotIn applies the NotIn predicate on the "lng" field.
func LngNotIn(vs ...float64) predicate.School {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.School(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLng), v...))
	})
}

// LngGT applies the GT predicate on the "lng" field.
func LngGT(v float64) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLng), v))
	})
}

// LngGTE applies the GTE predicate on the "lng" field.
func LngGTE(v float64) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLng), v))
	})
}

// LngLT applies the LT predicate on the "lng" field.
func LngLT(v float64) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLng), v))
	})
}

// LngLTE applies the LTE predicate on the "lng" field.
func LngLTE(v float64) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLng), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.School {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.School(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.School {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.School(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.School {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.School(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.School {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.School(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasAthletes applies the HasEdge predicate on the "athletes" edge.
func HasAthletes() predicate.School {
	return predicate.School(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AthletesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AthletesTable, AthletesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAthletesWith applies the HasEdge predicate on the "athletes" edge with a given conditions (other predicates).
func HasAthletesWith(preds ...predicate.Athlete) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AthletesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AthletesTable, AthletesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSchoolAthletes applies the HasEdge predicate on the "school_athletes" edge.
func HasSchoolAthletes() predicate.School {
	return predicate.School(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SchoolAthletesTable, SchoolAthletesColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, SchoolAthletesTable, SchoolAthletesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSchoolAthletesWith applies the HasEdge predicate on the "school_athletes" edge with a given conditions (other predicates).
func HasSchoolAthletesWith(preds ...predicate.AthleteSchool) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SchoolAthletesInverseTable, SchoolAthletesColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, SchoolAthletesTable, SchoolAthletesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.School) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.School) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.School) predicate.School {
	return predicate.School(func(s *sql.Selector) {
		p(s.Not())
	})
}
