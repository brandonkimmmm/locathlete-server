// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"locathlete-server/ent/school"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// School is the model entity for the School schema.
type School struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// StreetAddress holds the value of the "street_address" field.
	StreetAddress string `json:"street_address,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// AdministrationArea holds the value of the "administration_area" field.
	AdministrationArea string `json:"administration_area,omitempty"`
	// PostalCode holds the value of the "postal_code" field.
	PostalCode string `json:"postal_code,omitempty"`
	// Lat holds the value of the "lat" field.
	Lat float64 `json:"lat,omitempty"`
	// Lng holds the value of the "lng" field.
	Lng float64 `json:"lng,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SchoolQuery when eager-loading is set.
	Edges SchoolEdges `json:"edges"`
}

// SchoolEdges holds the relations/edges for other nodes in the graph.
type SchoolEdges struct {
	// Athletes holds the value of the athletes edge.
	Athletes []*Athlete `json:"athletes,omitempty"`
	// SchoolAthletes holds the value of the school_athletes edge.
	SchoolAthletes []*AthleteSchool `json:"school_athletes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AthletesOrErr returns the Athletes value or an error if the edge
// was not loaded in eager-loading.
func (e SchoolEdges) AthletesOrErr() ([]*Athlete, error) {
	if e.loadedTypes[0] {
		return e.Athletes, nil
	}
	return nil, &NotLoadedError{edge: "athletes"}
}

// SchoolAthletesOrErr returns the SchoolAthletes value or an error if the edge
// was not loaded in eager-loading.
func (e SchoolEdges) SchoolAthletesOrErr() ([]*AthleteSchool, error) {
	if e.loadedTypes[1] {
		return e.SchoolAthletes, nil
	}
	return nil, &NotLoadedError{edge: "school_athletes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*School) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case school.FieldLat, school.FieldLng:
			values[i] = new(sql.NullFloat64)
		case school.FieldID:
			values[i] = new(sql.NullInt64)
		case school.FieldName, school.FieldDescription, school.FieldStreetAddress, school.FieldCity, school.FieldCountry, school.FieldAdministrationArea, school.FieldPostalCode:
			values[i] = new(sql.NullString)
		case school.FieldCreatedAt, school.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type School", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the School fields.
func (s *School) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case school.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case school.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case school.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case school.FieldStreetAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field street_address", values[i])
			} else if value.Valid {
				s.StreetAddress = value.String
			}
		case school.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				s.City = value.String
			}
		case school.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				s.Country = value.String
			}
		case school.FieldAdministrationArea:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field administration_area", values[i])
			} else if value.Valid {
				s.AdministrationArea = value.String
			}
		case school.FieldPostalCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field postal_code", values[i])
			} else if value.Valid {
				s.PostalCode = value.String
			}
		case school.FieldLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lat", values[i])
			} else if value.Valid {
				s.Lat = value.Float64
			}
		case school.FieldLng:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lng", values[i])
			} else if value.Valid {
				s.Lng = value.Float64
			}
		case school.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case school.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryAthletes queries the "athletes" edge of the School entity.
func (s *School) QueryAthletes() *AthleteQuery {
	return (&SchoolClient{config: s.config}).QueryAthletes(s)
}

// QuerySchoolAthletes queries the "school_athletes" edge of the School entity.
func (s *School) QuerySchoolAthletes() *AthleteSchoolQuery {
	return (&SchoolClient{config: s.config}).QuerySchoolAthletes(s)
}

// Update returns a builder for updating this School.
// Note that you need to call School.Unwrap() before calling this method if this School
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *School) Update() *SchoolUpdateOne {
	return (&SchoolClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the School entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *School) Unwrap() *School {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: School is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *School) String() string {
	var builder strings.Builder
	builder.WriteString("School(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(s.Description)
	builder.WriteString(", ")
	builder.WriteString("street_address=")
	builder.WriteString(s.StreetAddress)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(s.City)
	builder.WriteString(", ")
	builder.WriteString("country=")
	builder.WriteString(s.Country)
	builder.WriteString(", ")
	builder.WriteString("administration_area=")
	builder.WriteString(s.AdministrationArea)
	builder.WriteString(", ")
	builder.WriteString("postal_code=")
	builder.WriteString(s.PostalCode)
	builder.WriteString(", ")
	builder.WriteString("lat=")
	builder.WriteString(fmt.Sprintf("%v", s.Lat))
	builder.WriteString(", ")
	builder.WriteString("lng=")
	builder.WriteString(fmt.Sprintf("%v", s.Lng))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Schools is a parsable slice of School.
type Schools []*School

func (s Schools) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
