// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"locathlete-server/ent/athlete"
	"locathlete-server/ent/athleteschool"
	"locathlete-server/ent/predicate"
	"locathlete-server/ent/school"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AthleteSchoolUpdate is the builder for updating AthleteSchool entities.
type AthleteSchoolUpdate struct {
	config
	hooks    []Hook
	mutation *AthleteSchoolMutation
}

// Where appends a list predicates to the AthleteSchoolUpdate builder.
func (asu *AthleteSchoolUpdate) Where(ps ...predicate.AthleteSchool) *AthleteSchoolUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetAthleteID sets the "athlete_id" field.
func (asu *AthleteSchoolUpdate) SetAthleteID(i int) *AthleteSchoolUpdate {
	asu.mutation.SetAthleteID(i)
	return asu
}

// SetSchoolID sets the "school_id" field.
func (asu *AthleteSchoolUpdate) SetSchoolID(i int) *AthleteSchoolUpdate {
	asu.mutation.SetSchoolID(i)
	return asu
}

// SetStartDate sets the "start_date" field.
func (asu *AthleteSchoolUpdate) SetStartDate(t time.Time) *AthleteSchoolUpdate {
	asu.mutation.SetStartDate(t)
	return asu
}

// SetEndDate sets the "end_date" field.
func (asu *AthleteSchoolUpdate) SetEndDate(t time.Time) *AthleteSchoolUpdate {
	asu.mutation.SetEndDate(t)
	return asu
}

// SetCreatedAt sets the "created_at" field.
func (asu *AthleteSchoolUpdate) SetCreatedAt(t time.Time) *AthleteSchoolUpdate {
	asu.mutation.SetCreatedAt(t)
	return asu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asu *AthleteSchoolUpdate) SetNillableCreatedAt(t *time.Time) *AthleteSchoolUpdate {
	if t != nil {
		asu.SetCreatedAt(*t)
	}
	return asu
}

// SetAthlete sets the "athlete" edge to the Athlete entity.
func (asu *AthleteSchoolUpdate) SetAthlete(a *Athlete) *AthleteSchoolUpdate {
	return asu.SetAthleteID(a.ID)
}

// SetSchool sets the "school" edge to the School entity.
func (asu *AthleteSchoolUpdate) SetSchool(s *School) *AthleteSchoolUpdate {
	return asu.SetSchoolID(s.ID)
}

// Mutation returns the AthleteSchoolMutation object of the builder.
func (asu *AthleteSchoolUpdate) Mutation() *AthleteSchoolMutation {
	return asu.mutation
}

// ClearAthlete clears the "athlete" edge to the Athlete entity.
func (asu *AthleteSchoolUpdate) ClearAthlete() *AthleteSchoolUpdate {
	asu.mutation.ClearAthlete()
	return asu
}

// ClearSchool clears the "school" edge to the School entity.
func (asu *AthleteSchoolUpdate) ClearSchool() *AthleteSchoolUpdate {
	asu.mutation.ClearSchool()
	return asu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AthleteSchoolUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(asu.hooks) == 0 {
		if err = asu.check(); err != nil {
			return 0, err
		}
		affected, err = asu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AthleteSchoolMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = asu.check(); err != nil {
				return 0, err
			}
			asu.mutation = mutation
			affected, err = asu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(asu.hooks) - 1; i >= 0; i-- {
			if asu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, asu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AthleteSchoolUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AthleteSchoolUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AthleteSchoolUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asu *AthleteSchoolUpdate) check() error {
	if _, ok := asu.mutation.AthleteID(); asu.mutation.AthleteCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AthleteSchool.athlete"`)
	}
	if _, ok := asu.mutation.SchoolID(); asu.mutation.SchoolCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AthleteSchool.school"`)
	}
	return nil
}

func (asu *AthleteSchoolUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   athleteschool.Table,
			Columns: athleteschool.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeInt,
					Column: athleteschool.FieldAthleteID,
				},
				{
					Type:   field.TypeInt,
					Column: athleteschool.FieldSchoolID,
				},
			},
		},
	}
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.StartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: athleteschool.FieldStartDate,
		})
	}
	if value, ok := asu.mutation.EndDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: athleteschool.FieldEndDate,
		})
	}
	if value, ok := asu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: athleteschool.FieldCreatedAt,
		})
	}
	if asu.mutation.AthleteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   athleteschool.AthleteTable,
			Columns: []string{athleteschool.AthleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: athlete.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.AthleteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   athleteschool.AthleteTable,
			Columns: []string{athleteschool.AthleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: athlete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asu.mutation.SchoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   athleteschool.SchoolTable,
			Columns: []string{athleteschool.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: school.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.SchoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   athleteschool.SchoolTable,
			Columns: []string{athleteschool.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: school.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{athleteschool.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AthleteSchoolUpdateOne is the builder for updating a single AthleteSchool entity.
type AthleteSchoolUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AthleteSchoolMutation
}

// SetAthleteID sets the "athlete_id" field.
func (asuo *AthleteSchoolUpdateOne) SetAthleteID(i int) *AthleteSchoolUpdateOne {
	asuo.mutation.SetAthleteID(i)
	return asuo
}

// SetSchoolID sets the "school_id" field.
func (asuo *AthleteSchoolUpdateOne) SetSchoolID(i int) *AthleteSchoolUpdateOne {
	asuo.mutation.SetSchoolID(i)
	return asuo
}

// SetStartDate sets the "start_date" field.
func (asuo *AthleteSchoolUpdateOne) SetStartDate(t time.Time) *AthleteSchoolUpdateOne {
	asuo.mutation.SetStartDate(t)
	return asuo
}

// SetEndDate sets the "end_date" field.
func (asuo *AthleteSchoolUpdateOne) SetEndDate(t time.Time) *AthleteSchoolUpdateOne {
	asuo.mutation.SetEndDate(t)
	return asuo
}

// SetCreatedAt sets the "created_at" field.
func (asuo *AthleteSchoolUpdateOne) SetCreatedAt(t time.Time) *AthleteSchoolUpdateOne {
	asuo.mutation.SetCreatedAt(t)
	return asuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asuo *AthleteSchoolUpdateOne) SetNillableCreatedAt(t *time.Time) *AthleteSchoolUpdateOne {
	if t != nil {
		asuo.SetCreatedAt(*t)
	}
	return asuo
}

// SetAthlete sets the "athlete" edge to the Athlete entity.
func (asuo *AthleteSchoolUpdateOne) SetAthlete(a *Athlete) *AthleteSchoolUpdateOne {
	return asuo.SetAthleteID(a.ID)
}

// SetSchool sets the "school" edge to the School entity.
func (asuo *AthleteSchoolUpdateOne) SetSchool(s *School) *AthleteSchoolUpdateOne {
	return asuo.SetSchoolID(s.ID)
}

// Mutation returns the AthleteSchoolMutation object of the builder.
func (asuo *AthleteSchoolUpdateOne) Mutation() *AthleteSchoolMutation {
	return asuo.mutation
}

// ClearAthlete clears the "athlete" edge to the Athlete entity.
func (asuo *AthleteSchoolUpdateOne) ClearAthlete() *AthleteSchoolUpdateOne {
	asuo.mutation.ClearAthlete()
	return asuo
}

// ClearSchool clears the "school" edge to the School entity.
func (asuo *AthleteSchoolUpdateOne) ClearSchool() *AthleteSchoolUpdateOne {
	asuo.mutation.ClearSchool()
	return asuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AthleteSchoolUpdateOne) Select(field string, fields ...string) *AthleteSchoolUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AthleteSchool entity.
func (asuo *AthleteSchoolUpdateOne) Save(ctx context.Context) (*AthleteSchool, error) {
	var (
		err  error
		node *AthleteSchool
	)
	if len(asuo.hooks) == 0 {
		if err = asuo.check(); err != nil {
			return nil, err
		}
		node, err = asuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AthleteSchoolMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = asuo.check(); err != nil {
				return nil, err
			}
			asuo.mutation = mutation
			node, err = asuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(asuo.hooks) - 1; i >= 0; i-- {
			if asuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, asuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AthleteSchool)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AthleteSchoolMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AthleteSchoolUpdateOne) SaveX(ctx context.Context) *AthleteSchool {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AthleteSchoolUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AthleteSchoolUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asuo *AthleteSchoolUpdateOne) check() error {
	if _, ok := asuo.mutation.AthleteID(); asuo.mutation.AthleteCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AthleteSchool.athlete"`)
	}
	if _, ok := asuo.mutation.SchoolID(); asuo.mutation.SchoolCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AthleteSchool.school"`)
	}
	return nil
}

func (asuo *AthleteSchoolUpdateOne) sqlSave(ctx context.Context) (_node *AthleteSchool, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   athleteschool.Table,
			Columns: athleteschool.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeInt,
					Column: athleteschool.FieldAthleteID,
				},
				{
					Type:   field.TypeInt,
					Column: athleteschool.FieldSchoolID,
				},
			},
		},
	}
	if id, ok := asuo.mutation.AthleteID(); !ok {
		return nil, &ValidationError{Name: "athlete_id", err: errors.New(`ent: missing "AthleteSchool.athlete_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := asuo.mutation.SchoolID(); !ok {
		return nil, &ValidationError{Name: "school_id", err: errors.New(`ent: missing "AthleteSchool.school_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !athleteschool.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.StartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: athleteschool.FieldStartDate,
		})
	}
	if value, ok := asuo.mutation.EndDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: athleteschool.FieldEndDate,
		})
	}
	if value, ok := asuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: athleteschool.FieldCreatedAt,
		})
	}
	if asuo.mutation.AthleteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   athleteschool.AthleteTable,
			Columns: []string{athleteschool.AthleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: athlete.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.AthleteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   athleteschool.AthleteTable,
			Columns: []string{athleteschool.AthleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: athlete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asuo.mutation.SchoolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   athleteschool.SchoolTable,
			Columns: []string{athleteschool.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: school.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.SchoolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   athleteschool.SchoolTable,
			Columns: []string{athleteschool.SchoolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: school.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AthleteSchool{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{athleteschool.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
