// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"locathlete-server/ent/athlete"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AthleteCreate is the builder for creating a Athlete entity.
type AthleteCreate struct {
	config
	mutation *AthleteMutation
	hooks    []Hook
}

// SetEmail sets the "email" field.
func (ac *AthleteCreate) SetEmail(s string) *AthleteCreate {
	ac.mutation.SetEmail(s)
	return ac
}

// SetBio sets the "bio" field.
func (ac *AthleteCreate) SetBio(s string) *AthleteCreate {
	ac.mutation.SetBio(s)
	return ac
}

// SetFirstName sets the "first_name" field.
func (ac *AthleteCreate) SetFirstName(s string) *AthleteCreate {
	ac.mutation.SetFirstName(s)
	return ac
}

// SetMiddleName sets the "middle_name" field.
func (ac *AthleteCreate) SetMiddleName(s string) *AthleteCreate {
	ac.mutation.SetMiddleName(s)
	return ac
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (ac *AthleteCreate) SetNillableMiddleName(s *string) *AthleteCreate {
	if s != nil {
		ac.SetMiddleName(*s)
	}
	return ac
}

// SetLastName sets the "last_name" field.
func (ac *AthleteCreate) SetLastName(s string) *AthleteCreate {
	ac.mutation.SetLastName(s)
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AthleteCreate) SetCreatedAt(t time.Time) *AthleteCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AthleteCreate) SetNillableCreatedAt(t *time.Time) *AthleteCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AthleteCreate) SetUpdatedAt(t time.Time) *AthleteCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AthleteCreate) SetNillableUpdatedAt(t *time.Time) *AthleteCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// Mutation returns the AthleteMutation object of the builder.
func (ac *AthleteCreate) Mutation() *AthleteMutation {
	return ac.mutation
}

// Save creates the Athlete in the database.
func (ac *AthleteCreate) Save(ctx context.Context) (*Athlete, error) {
	var (
		err  error
		node *Athlete
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AthleteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Athlete)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AthleteMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AthleteCreate) SaveX(ctx context.Context) *Athlete {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AthleteCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AthleteCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AthleteCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := athlete.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := athlete.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AthleteCreate) check() error {
	if _, ok := ac.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Athlete.email"`)}
	}
	if v, ok := ac.mutation.Email(); ok {
		if err := athlete.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Athlete.email": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Bio(); !ok {
		return &ValidationError{Name: "bio", err: errors.New(`ent: missing required field "Athlete.bio"`)}
	}
	if _, ok := ac.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "Athlete.first_name"`)}
	}
	if v, ok := ac.mutation.FirstName(); ok {
		if err := athlete.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Athlete.first_name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "Athlete.last_name"`)}
	}
	if v, ok := ac.mutation.LastName(); ok {
		if err := athlete.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Athlete.last_name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Athlete.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Athlete.updated_at"`)}
	}
	return nil
}

func (ac *AthleteCreate) sqlSave(ctx context.Context) (*Athlete, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *AthleteCreate) createSpec() (*Athlete, *sqlgraph.CreateSpec) {
	var (
		_node = &Athlete{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: athlete.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: athlete.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: athlete.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := ac.mutation.Bio(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: athlete.FieldBio,
		})
		_node.Bio = value
	}
	if value, ok := ac.mutation.FirstName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: athlete.FieldFirstName,
		})
		_node.FirstName = value
	}
	if value, ok := ac.mutation.MiddleName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: athlete.FieldMiddleName,
		})
		_node.MiddleName = value
	}
	if value, ok := ac.mutation.LastName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: athlete.FieldLastName,
		})
		_node.LastName = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: athlete.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: athlete.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// AthleteCreateBulk is the builder for creating many Athlete entities in bulk.
type AthleteCreateBulk struct {
	config
	builders []*AthleteCreate
}

// Save creates the Athlete entities in the database.
func (acb *AthleteCreateBulk) Save(ctx context.Context) ([]*Athlete, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Athlete, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AthleteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AthleteCreateBulk) SaveX(ctx context.Context) []*Athlete {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AthleteCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AthleteCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
