// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"locathlete-server/ent/athlete"
	"locathlete-server/ent/predicate"
	"locathlete-server/ent/school"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SchoolUpdate is the builder for updating School entities.
type SchoolUpdate struct {
	config
	hooks    []Hook
	mutation *SchoolMutation
}

// Where appends a list predicates to the SchoolUpdate builder.
func (su *SchoolUpdate) Where(ps ...predicate.School) *SchoolUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SchoolUpdate) SetName(s string) *SchoolUpdate {
	su.mutation.SetName(s)
	return su
}

// SetDescription sets the "description" field.
func (su *SchoolUpdate) SetDescription(s string) *SchoolUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetStreetAddress sets the "street_address" field.
func (su *SchoolUpdate) SetStreetAddress(s string) *SchoolUpdate {
	su.mutation.SetStreetAddress(s)
	return su
}

// SetCity sets the "city" field.
func (su *SchoolUpdate) SetCity(s string) *SchoolUpdate {
	su.mutation.SetCity(s)
	return su
}

// SetCountry sets the "country" field.
func (su *SchoolUpdate) SetCountry(s string) *SchoolUpdate {
	su.mutation.SetCountry(s)
	return su
}

// SetAdministrationArea sets the "administration_area" field.
func (su *SchoolUpdate) SetAdministrationArea(s string) *SchoolUpdate {
	su.mutation.SetAdministrationArea(s)
	return su
}

// SetPostalCode sets the "postal_code" field.
func (su *SchoolUpdate) SetPostalCode(s string) *SchoolUpdate {
	su.mutation.SetPostalCode(s)
	return su
}

// SetLat sets the "lat" field.
func (su *SchoolUpdate) SetLat(f float64) *SchoolUpdate {
	su.mutation.ResetLat()
	su.mutation.SetLat(f)
	return su
}

// AddLat adds f to the "lat" field.
func (su *SchoolUpdate) AddLat(f float64) *SchoolUpdate {
	su.mutation.AddLat(f)
	return su
}

// SetLng sets the "lng" field.
func (su *SchoolUpdate) SetLng(f float64) *SchoolUpdate {
	su.mutation.ResetLng()
	su.mutation.SetLng(f)
	return su
}

// AddLng adds f to the "lng" field.
func (su *SchoolUpdate) AddLng(f float64) *SchoolUpdate {
	su.mutation.AddLng(f)
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SchoolUpdate) SetCreatedAt(t time.Time) *SchoolUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SchoolUpdate) SetNillableCreatedAt(t *time.Time) *SchoolUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SchoolUpdate) SetUpdatedAt(t time.Time) *SchoolUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// AddAthleteIDs adds the "athletes" edge to the Athlete entity by IDs.
func (su *SchoolUpdate) AddAthleteIDs(ids ...int) *SchoolUpdate {
	su.mutation.AddAthleteIDs(ids...)
	return su
}

// AddAthletes adds the "athletes" edges to the Athlete entity.
func (su *SchoolUpdate) AddAthletes(a ...*Athlete) *SchoolUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.AddAthleteIDs(ids...)
}

// Mutation returns the SchoolMutation object of the builder.
func (su *SchoolUpdate) Mutation() *SchoolMutation {
	return su.mutation
}

// ClearAthletes clears all "athletes" edges to the Athlete entity.
func (su *SchoolUpdate) ClearAthletes() *SchoolUpdate {
	su.mutation.ClearAthletes()
	return su
}

// RemoveAthleteIDs removes the "athletes" edge to Athlete entities by IDs.
func (su *SchoolUpdate) RemoveAthleteIDs(ids ...int) *SchoolUpdate {
	su.mutation.RemoveAthleteIDs(ids...)
	return su
}

// RemoveAthletes removes "athletes" edges to Athlete entities.
func (su *SchoolUpdate) RemoveAthletes(a ...*Athlete) *SchoolUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.RemoveAthleteIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SchoolUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	su.defaults()
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SchoolMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SchoolUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SchoolUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SchoolUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SchoolUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := school.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SchoolUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := school.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "School.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Description(); ok {
		if err := school.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "School.description": %w`, err)}
		}
	}
	if v, ok := su.mutation.StreetAddress(); ok {
		if err := school.StreetAddressValidator(v); err != nil {
			return &ValidationError{Name: "street_address", err: fmt.Errorf(`ent: validator failed for field "School.street_address": %w`, err)}
		}
	}
	if v, ok := su.mutation.City(); ok {
		if err := school.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "School.city": %w`, err)}
		}
	}
	if v, ok := su.mutation.Country(); ok {
		if err := school.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "School.country": %w`, err)}
		}
	}
	if v, ok := su.mutation.AdministrationArea(); ok {
		if err := school.AdministrationAreaValidator(v); err != nil {
			return &ValidationError{Name: "administration_area", err: fmt.Errorf(`ent: validator failed for field "School.administration_area": %w`, err)}
		}
	}
	if v, ok := su.mutation.PostalCode(); ok {
		if err := school.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`ent: validator failed for field "School.postal_code": %w`, err)}
		}
	}
	if v, ok := su.mutation.Lat(); ok {
		if err := school.LatValidator(v); err != nil {
			return &ValidationError{Name: "lat", err: fmt.Errorf(`ent: validator failed for field "School.lat": %w`, err)}
		}
	}
	if v, ok := su.mutation.Lng(); ok {
		if err := school.LngValidator(v); err != nil {
			return &ValidationError{Name: "lng", err: fmt.Errorf(`ent: validator failed for field "School.lng": %w`, err)}
		}
	}
	return nil
}

func (su *SchoolUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   school.Table,
			Columns: school.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: school.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: school.FieldName,
		})
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: school.FieldDescription,
		})
	}
	if value, ok := su.mutation.StreetAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: school.FieldStreetAddress,
		})
	}
	if value, ok := su.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: school.FieldCity,
		})
	}
	if value, ok := su.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: school.FieldCountry,
		})
	}
	if value, ok := su.mutation.AdministrationArea(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: school.FieldAdministrationArea,
		})
	}
	if value, ok := su.mutation.PostalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: school.FieldPostalCode,
		})
	}
	if value, ok := su.mutation.Lat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: school.FieldLat,
		})
	}
	if value, ok := su.mutation.AddedLat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: school.FieldLat,
		})
	}
	if value, ok := su.mutation.Lng(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: school.FieldLng,
		})
	}
	if value, ok := su.mutation.AddedLng(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: school.FieldLng,
		})
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: school.FieldCreatedAt,
		})
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: school.FieldUpdatedAt,
		})
	}
	if su.mutation.AthletesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   school.AthletesTable,
			Columns: school.AthletesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: athlete.FieldID,
				},
			},
		}
		createE := &AthleteSchoolCreate{config: su.config, mutation: newAthleteSchoolMutation(su.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedAthletesIDs(); len(nodes) > 0 && !su.mutation.AthletesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   school.AthletesTable,
			Columns: school.AthletesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: athlete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AthleteSchoolCreate{config: su.config, mutation: newAthleteSchoolMutation(su.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AthletesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   school.AthletesTable,
			Columns: school.AthletesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: athlete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AthleteSchoolCreate{config: su.config, mutation: newAthleteSchoolMutation(su.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{school.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SchoolUpdateOne is the builder for updating a single School entity.
type SchoolUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SchoolMutation
}

// SetName sets the "name" field.
func (suo *SchoolUpdateOne) SetName(s string) *SchoolUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetDescription sets the "description" field.
func (suo *SchoolUpdateOne) SetDescription(s string) *SchoolUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetStreetAddress sets the "street_address" field.
func (suo *SchoolUpdateOne) SetStreetAddress(s string) *SchoolUpdateOne {
	suo.mutation.SetStreetAddress(s)
	return suo
}

// SetCity sets the "city" field.
func (suo *SchoolUpdateOne) SetCity(s string) *SchoolUpdateOne {
	suo.mutation.SetCity(s)
	return suo
}

// SetCountry sets the "country" field.
func (suo *SchoolUpdateOne) SetCountry(s string) *SchoolUpdateOne {
	suo.mutation.SetCountry(s)
	return suo
}

// SetAdministrationArea sets the "administration_area" field.
func (suo *SchoolUpdateOne) SetAdministrationArea(s string) *SchoolUpdateOne {
	suo.mutation.SetAdministrationArea(s)
	return suo
}

// SetPostalCode sets the "postal_code" field.
func (suo *SchoolUpdateOne) SetPostalCode(s string) *SchoolUpdateOne {
	suo.mutation.SetPostalCode(s)
	return suo
}

// SetLat sets the "lat" field.
func (suo *SchoolUpdateOne) SetLat(f float64) *SchoolUpdateOne {
	suo.mutation.ResetLat()
	suo.mutation.SetLat(f)
	return suo
}

// AddLat adds f to the "lat" field.
func (suo *SchoolUpdateOne) AddLat(f float64) *SchoolUpdateOne {
	suo.mutation.AddLat(f)
	return suo
}

// SetLng sets the "lng" field.
func (suo *SchoolUpdateOne) SetLng(f float64) *SchoolUpdateOne {
	suo.mutation.ResetLng()
	suo.mutation.SetLng(f)
	return suo
}

// AddLng adds f to the "lng" field.
func (suo *SchoolUpdateOne) AddLng(f float64) *SchoolUpdateOne {
	suo.mutation.AddLng(f)
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *SchoolUpdateOne) SetCreatedAt(t time.Time) *SchoolUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SchoolUpdateOne) SetNillableCreatedAt(t *time.Time) *SchoolUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SchoolUpdateOne) SetUpdatedAt(t time.Time) *SchoolUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// AddAthleteIDs adds the "athletes" edge to the Athlete entity by IDs.
func (suo *SchoolUpdateOne) AddAthleteIDs(ids ...int) *SchoolUpdateOne {
	suo.mutation.AddAthleteIDs(ids...)
	return suo
}

// AddAthletes adds the "athletes" edges to the Athlete entity.
func (suo *SchoolUpdateOne) AddAthletes(a ...*Athlete) *SchoolUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.AddAthleteIDs(ids...)
}

// Mutation returns the SchoolMutation object of the builder.
func (suo *SchoolUpdateOne) Mutation() *SchoolMutation {
	return suo.mutation
}

// ClearAthletes clears all "athletes" edges to the Athlete entity.
func (suo *SchoolUpdateOne) ClearAthletes() *SchoolUpdateOne {
	suo.mutation.ClearAthletes()
	return suo
}

// RemoveAthleteIDs removes the "athletes" edge to Athlete entities by IDs.
func (suo *SchoolUpdateOne) RemoveAthleteIDs(ids ...int) *SchoolUpdateOne {
	suo.mutation.RemoveAthleteIDs(ids...)
	return suo
}

// RemoveAthletes removes "athletes" edges to Athlete entities.
func (suo *SchoolUpdateOne) RemoveAthletes(a ...*Athlete) *SchoolUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.RemoveAthleteIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SchoolUpdateOne) Select(field string, fields ...string) *SchoolUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated School entity.
func (suo *SchoolUpdateOne) Save(ctx context.Context) (*School, error) {
	var (
		err  error
		node *School
	)
	suo.defaults()
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SchoolMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, suo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*School)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SchoolMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SchoolUpdateOne) SaveX(ctx context.Context) *School {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SchoolUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SchoolUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SchoolUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := school.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SchoolUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := school.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "School.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Description(); ok {
		if err := school.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "School.description": %w`, err)}
		}
	}
	if v, ok := suo.mutation.StreetAddress(); ok {
		if err := school.StreetAddressValidator(v); err != nil {
			return &ValidationError{Name: "street_address", err: fmt.Errorf(`ent: validator failed for field "School.street_address": %w`, err)}
		}
	}
	if v, ok := suo.mutation.City(); ok {
		if err := school.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "School.city": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Country(); ok {
		if err := school.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "School.country": %w`, err)}
		}
	}
	if v, ok := suo.mutation.AdministrationArea(); ok {
		if err := school.AdministrationAreaValidator(v); err != nil {
			return &ValidationError{Name: "administration_area", err: fmt.Errorf(`ent: validator failed for field "School.administration_area": %w`, err)}
		}
	}
	if v, ok := suo.mutation.PostalCode(); ok {
		if err := school.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`ent: validator failed for field "School.postal_code": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Lat(); ok {
		if err := school.LatValidator(v); err != nil {
			return &ValidationError{Name: "lat", err: fmt.Errorf(`ent: validator failed for field "School.lat": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Lng(); ok {
		if err := school.LngValidator(v); err != nil {
			return &ValidationError{Name: "lng", err: fmt.Errorf(`ent: validator failed for field "School.lng": %w`, err)}
		}
	}
	return nil
}

func (suo *SchoolUpdateOne) sqlSave(ctx context.Context) (_node *School, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   school.Table,
			Columns: school.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: school.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "School.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, school.FieldID)
		for _, f := range fields {
			if !school.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != school.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: school.FieldName,
		})
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: school.FieldDescription,
		})
	}
	if value, ok := suo.mutation.StreetAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: school.FieldStreetAddress,
		})
	}
	if value, ok := suo.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: school.FieldCity,
		})
	}
	if value, ok := suo.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: school.FieldCountry,
		})
	}
	if value, ok := suo.mutation.AdministrationArea(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: school.FieldAdministrationArea,
		})
	}
	if value, ok := suo.mutation.PostalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: school.FieldPostalCode,
		})
	}
	if value, ok := suo.mutation.Lat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: school.FieldLat,
		})
	}
	if value, ok := suo.mutation.AddedLat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: school.FieldLat,
		})
	}
	if value, ok := suo.mutation.Lng(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: school.FieldLng,
		})
	}
	if value, ok := suo.mutation.AddedLng(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: school.FieldLng,
		})
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: school.FieldCreatedAt,
		})
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: school.FieldUpdatedAt,
		})
	}
	if suo.mutation.AthletesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   school.AthletesTable,
			Columns: school.AthletesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: athlete.FieldID,
				},
			},
		}
		createE := &AthleteSchoolCreate{config: suo.config, mutation: newAthleteSchoolMutation(suo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedAthletesIDs(); len(nodes) > 0 && !suo.mutation.AthletesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   school.AthletesTable,
			Columns: school.AthletesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: athlete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AthleteSchoolCreate{config: suo.config, mutation: newAthleteSchoolMutation(suo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AthletesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   school.AthletesTable,
			Columns: school.AthletesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: athlete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AthleteSchoolCreate{config: suo.config, mutation: newAthleteSchoolMutation(suo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &School{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{school.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
